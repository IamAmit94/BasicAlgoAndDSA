// Helper method in recursion syntax

// function outer(input){
    
//     var outerScopedVariable = []

//     function helper(helperInput){
//         // modify the outerScopedVariable
//         helper(helperInput--)
//     }
    
//     helper(input)

//     return outerScopedVariable;

// }


/****************** FIND ALL ODD USING THE RECURSIVE FUNX *********************/




// const collectOddValues = (arr) => {
    
//     let result = []

//     let helper = (helperInput) => {
//         if(helperInput.length === 0) {
//             return;
//         }
        
//         if(helperInput[0] % 2 !== 0){
//             result.push(helperInput[0])
//         }
        
//         helper(helperInput.slice(1))
//     }
    
//     helper(arr)

//     return result;

// }

// console.log(collectOddValues([1,2,3,4,5,6,7,8,9]))


/**************************************** PURE RECURSION ****************************/

// const collectOddValues = (arr) => {
//     let newArr = [];
    
//     if(arr.length === 0) {
//         return newArr;
//     }
        
//     if(arr[0] % 2 !== 0){
//         newArr.push(arr[0]);
//     }
        
//     newArr = newArr.concat(collectOddValues(arr.slice(1)));
//     return newArr;
// }

// console.log(collectOddValues([1,2,3,4,5,6,7,8,9]))


let arr = [1,2,3,4,5,6,7,8,9];

console.log(arr.slice())